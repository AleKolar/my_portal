"""
Django settings for my_portal project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
import logging.handlers


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-33%y9_g%z6hb1^3t$8d105#8_*%4*edtz@@&bzk=nixg&=sgat'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

SITE_ID = 1
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'protect',
    'sign',
    'allauth.socialaccount.providers.google',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_apscheduler',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',

]

ROOT_URLCONF = 'my_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [

    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'my_portal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db_my_portal.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

STATIC_URL = 'static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'


LOGIN_URL = 'sign/login/'

LOGIN_REDIRECT_URL = 'protect/'

LOGOUT_REDIRECT_URL = 'logout/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = ("mandatory")
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'confirm_email'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'ваш_client_id',
            'secret': 'ваш_client_secret',
        }
    }
}

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = 'gefest-173'
EMAIL_HOST_PASSWORD = 'Mn14071979'
EMAIL_USE_SSL = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

DEFAULT_FROM_EMAIL = 'gefest-173@yandex.ru'

ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 20

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

APSCHEDULER_RUN_NOW_TIMEOUT = 25

CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'

CELERY_RESULT_BACKEND = 'rpc://'



CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}

# LOGS_DIR = os.path.join(BASE_DIR, 'logs')
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logs.StreamHandler',
#             'filters': ['debug_true'],
#         },
#         'file_general': {
#             'level': 'INFO',
#             'class': 'logs.FileHandler',
#             'filename': os.path.join(LOGS_DIR, 'general.log'),
#             'formatter': 'general_format',
#             'filters': ['debug_false'],
#         },
#         'file_errors': {
#             'level': 'ERROR',
#             'class': 'logs.FileHandler',
#             'filename': os.path.join(LOGS_DIR, 'errors.log'),
#             'formatter': 'errors_format',
#             'filters': ['debug_false'],
#         },
#         'file_security': {
#             'level': 'INFO',
#             'class': 'logs.FileHandler',
#             'filename': os.path.join(LOGS_DIR, 'security.log'),
#             'formatter': 'security_format',
#             'filters': ['debug_false'],
#         },
#         'email_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#             'formatter': 'errors_format',
#             'filters': ['debug_false'],
#             'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
#             'email': 'gefest-173@yandex.ru',
#             'include_html': True,
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file_general', 'file_errors', 'mail_admins'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'news': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['file_errors', 'mail_admins'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.server': {
#             'handlers': ['file_errors', 'mail_admins'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.template': {
#             'handlers': ['file_errors'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.db': {
#             'handlers': ['file_errors'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.security': {
#             'handlers': ['file_security'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#     },
#     'formatters': {
#         'verbose': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
#         },
#         'general_format': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
#         },
#         'errors_format': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(message)s %(pathname)s'
#         },
#         'security_format': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
#         },
#     },
#
# }


'''
Я могу сделать logging требуемой конфигурации файла журнала, 
только, в упрощенной конфигурацию ,без явной ссылки на 'my_portal'
'''
import logging
LOGS_DIR = os.path.join(BASE_DIR, 'logs')


logging.basicConfig(level=logging.DEBUG)


file_general_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'general.log'))
file_general_handler.setLevel(logging.INFO)
file_general_format = logging.Formatter('%(levelname)s %(asctime)s %(module)s %(message)s')
file_general_handler.setFormatter(file_general_format)


file_errors_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'errors.log'))
file_errors_handler.setLevel(logging.ERROR)
file_errors_format = logging.Formatter('%(levelname)s %(asctime)s %(module)s %(message)s %(pathname)s')
file_errors_handler.setFormatter(file_errors_format)


file_security_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'security.log'))
file_security_handler.setLevel(logging.INFO)
file_security_format = logging.Formatter('%(levelname)s %(asctime)s %(module)s %(message)s')
file_security_handler.setFormatter(file_security_format)


email_admins_handler = logging.handlers.SMTPHandler(
    mailhost='localhost',
    fromaddr='news@example.com',
    toaddrs=['gefest-173@yandex.ru'],
    subject='Error in app'
)
email_admins_handler.setLevel(logging.ERROR)
email_admins_handler.setFormatter(file_errors_format)


root_logger = logging.getLogger('')
root_logger.addHandler(file_general_handler)
root_logger.addHandler(file_errors_handler)
root_logger.addHandler(file_security_handler)
root_logger.addHandler(email_admins_handler)



# LOGS_DIR = os.path.join(BASE_DIR, 'logs')
#
# # handlers
# handlers_config = {
#     'file_general': {
#         'class': 'logging.FileHandler',
#         'level': logging.INFO,
#         'formatter': 'general_format',
#         'filename': os.path.join(LOGS_DIR, 'general.log'),
#     },
#     'file_errors': {
#         'class': 'logging.FileHandler',
#         'level': logging.ERROR,
#         'formatter': 'errors_format',
#         'filename': os.path.join(LOGS_DIR, 'errors.log'),
#     },
#     'file_security': {
#         'class': 'logging.FileHandler',
#         'level': logging.INFO,
#         'formatter': 'security_format',
#         'filename': os.path.join(LOGS_DIR, 'security.log'),
#     },
#     'email_admins': {
#         'class': 'logging.handlers.SMTPHandler',
#         'level': logging.ERROR,
#         'formatter': 'errors_format',
#         'mailhost': 'localhost',
#         'fromaddr': 'gefest-173@yandex.ru',
#         'toaddrs': ['alek.kolark@gmail.com', 'alekolar17982@gmail.com'],
#         'subject': 'Error in app',
#     }
# }
#
# # formaters
# formatters_config = {
#     'general_format': {
#         'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
#     },
#     'errors_format': {
#         'format': '%(levelname)s %(asctime)s %(module)s %(message)s %(pathname)s'
#     },
#     'security_format': {
#         'format': '%(levelname)s %(asctime)s %(module)s %(message)s'
#     },
# }
#
# # loggers
# loggers_config = {
#     '': {  # Root logger
#         'handlers': ['file_general', 'file_errors', 'file_security', 'email_admins'],
#         'level': logging.DEBUG,
#     }
# }
#
# #  settings
# logging.basicConfig(level=logging.DEBUG)
#
# # logging configuration
# logging.config.dictConfig({
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': handlers_config,
#     'formatters': formatters_config,
#     'loggers': loggers_config,
# })